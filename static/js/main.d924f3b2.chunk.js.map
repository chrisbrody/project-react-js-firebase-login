{"version":3,"sources":["config/fire.js","components/LoginRegister.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoginRegister","props","handleChange","e","setState","target","name","value","login","preventDefault","auth","signInWithEmailAndPassword","state","email","password","catch","error","fireErrors","message","register","createUserWithEmailAndPassword","getAction","action","formTitle","loginBtn","errorNotifiction","this","className","submitBtn","type","onClick","login_register","id","onChange","Component","Home","logout","signOut","onAuthStateChanged","user","console","log","authListener","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAiBiBA,E,OAFFC,EAASC,cAZX,CACTC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,8C,QCsFIC,E,YA3Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRC,aAAe,SAACC,GACZ,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAMH,EAAEE,OAAOE,SAb1B,EAgBnBC,MAAQ,SAACL,GACPA,EAAEM,iBACFnB,EAAKoB,OAAOC,2BAA2B,EAAKC,MAAMC,MAAO,EAAKD,MAAME,UACnEC,OAAM,SAACC,GACJ,EAAKZ,SAAS,CAAEa,WAAWD,EAAME,cApBpB,EAwBnBC,SAAW,SAAChB,GACVA,EAAEM,iBACFnB,EAAKoB,OAAOU,+BAA+B,EAAKR,MAAMC,MAAO,EAAKD,MAAME,UACvEC,OAAM,SAACC,GACJ,EAAKZ,SAAS,CAAEa,WAAWD,EAAME,cA5BpB,EAgCnBG,UAAY,SAAAC,GACM,aAAXA,EACC,EAAKlB,SAAS,CACVmB,UAAW,oBACXC,UAAU,EACVP,WAAY,KAGlB,EAAKb,SAAS,CACVmB,UAAW,QACXC,UAAU,EACVP,WAAY,MAzCpB,EAAKL,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVG,WAAY,GACZM,UAAW,QACXC,UAAU,GAPK,E,sEAiDV,IAAD,OAEFC,EAAmBC,KAAKd,MAAMK,WAAc,yBAAKU,UAAU,SAASD,KAAKd,MAAMK,YAAqB,KAGpGW,EAAYF,KAAKd,MAAMY,SACtB,2BAAOK,KAAK,SAASF,UAAU,WAAWG,QAASJ,KAAKlB,MAAOD,MAAM,UACrE,2BAAOsB,KAAK,SAASF,UAAU,WAAWG,QAASJ,KAAKP,SAAUZ,MAAM,aAGzEwB,EAAiBL,KAAKd,MAAMY,SAC3B,2BAAOK,KAAK,SAASF,UAAU,cAAcG,QAAS,kBAAM,EAAKT,UAAU,aAAad,MAAM,aAC9F,2BAAOsB,KAAK,SAASF,UAAU,cAAcG,QAAS,kBAAM,EAAKT,UAAU,UAAUd,MAAM,UAEjG,OACG,oCACE,yBAAKoB,UAAU,cACX,yBAAKK,GAAG,SAASN,KAAKd,MAAMW,WAC5B,yBAAKI,UAAU,QACNF,EACD,8BACI,2BAAOI,KAAK,OACZtB,MAAOmB,KAAKd,MAAMC,MAClBoB,SAAUP,KAAKxB,aACfI,KAAK,UAEL,2BAAOuB,KAAK,WACZtB,MAAOmB,KAAKd,MAAME,SAClBmB,SAAUP,KAAKxB,aACfI,KAAK,aAEJsB,GAEJG,S,GApFOG,aCkDbC,E,YAhDX,WAAYlC,GAAQ,IAAD,8BACf,4CAAMA,KA6BVmC,OAAS,WACL9C,EAAKoB,OAAO2B,WA7BZ,EAAKzB,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVG,WAAY,GACZM,UAAW,QACXC,UAAU,GAPG,E,4EAWH,IAAD,OACXlC,EAAKoB,OAAO4B,oBAAmB,SAACC,GAC3BA,GACD,EAAKnC,SAAS,CACVmC,KAAMA,EACN1B,MAAO0B,EAAK1B,QAEhB2B,QAAQC,IAAI,EAAK7B,MAAMC,QAGvB,EAAKT,SAAS,CAACmC,KAAK,Y,0CAMxBb,KAAKgB,iB,+BAUL,OACI,6CAEkBhB,KAAKd,MAAMC,MACzB,6BACA,4BAAQiB,QAASJ,KAAKU,QAAtB,e,GA5CGF,aCqCJS,G,kBAjCb,aAAe,IAAD,8BACZ,+CACK/B,MAAQ,CACX2B,KAAM,MAHI,E,iFAQZb,KAAKgB,iB,qCAGS,IAAD,OACbpD,EAAKoB,OAAO4B,oBAAmB,SAACC,GAC3BA,EACD,EAAKnC,SAAS,CAACmC,SAEf,EAAKnC,SAAS,CAACmC,KAAK,Y,+BAMzB,OACG,oCACE,6BACGb,KAAKd,MAAM2B,KAAQ,kBAAC,EAAD,MAAa,kBAAC,EAAD,Y,GA1BzBL,cCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d924f3b2.chunk.js","sourcesContent":["import firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar config = {\n    apiKey: \"AIzaSyCamYFS8aUErk4O6pq0HnaUqZqQ95uSYd4\",\n    authDomain: \"login-4ff9d.firebaseapp.com\",\n    databaseURL: \"https://login-4ff9d.firebaseio.com\",\n    projectId: \"login-4ff9d\",\n    storageBucket: \"login-4ff9d.appspot.com\",\n    messagingSenderId: \"763287540217\",\n    appId: \"1:763287540217:web:860ff86ae25fc0a0612d28\"\n  };\n\n\n  // Initialize Firebase\n  const fire = firebase.initializeApp(config);\n\n  export default fire;","import React, {Component} from 'react';\nimport fire from '../config/fire';\n\nclass LoginRegister extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      fireErrors: '',\n      formTitle: 'Login',\n      loginBtn: true\n\n    }\n  }\n\n  handleChange = (e) => {\n      this.setState({ [e.target.name]:e.target.value })\n  } \n\n  login = (e) => {\n    e.preventDefault();\n    fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password)\n    .catch((error) => {\n        this.setState({ fireErrors:error.message })\n    });\n  }\n\n  register = (e) => {\n    e.preventDefault();\n    fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\n    .catch((error) => {\n        this.setState({ fireErrors:error.message })\n    });\n  }\n\n  getAction = action => {\n      if(action === 'register') {\n          this.setState({\n              formTitle: 'Register New User', \n              loginBtn: false, \n              fireErrors: ''\n          })\n      } else {\n        this.setState({\n            formTitle: 'Login', \n            loginBtn: true, \n            fireErrors: ''\n        })\n      }\n  }\n\n\n  render(){\n    //   display errors \n    let errorNotifiction = this.state.fireErrors ? (<div className=\"Error\">{this.state.fireErrors}</div>) : null\n\n    // handle first button \n    let submitBtn = this.state.loginBtn ? \n        (<input type=\"submit\" className=\"loginBtn\" onClick={this.login} value=\"Enter\" />) : \n        (<input type=\"submit\" className=\"loginBtn\" onClick={this.register} value=\"Register\" />)\n\n    // handle second button \n    let login_register = this.state.loginBtn ? \n        (<input type=\"submit\" className=\"registerBtn\" onClick={() => this.getAction('register')} value=\"Register\" />) : \n        (<input type=\"submit\" className=\"registerBtn\" onClick={() => this.getAction('login')} value=\"Login\" />)\n\n   return (\n      <>\n        <div className=\"form_block\">\n            <div id=\"title\">{this.state.formTitle}</div>\n            <div className=\"body\">\n                    {errorNotifiction}\n                    <form>\n                        <input type=\"text\" \n                        value={this.state.email} \n                        onChange={this.handleChange} \n                        name=\"email\" />\n\n                        <input type=\"password\" \n                        value={this.state.password} \n                        onChange={this.handleChange} \n                        name=\"password\" />\n\n                        {submitBtn}\n                    </form>\n                    {login_register}\n                </div>\n        </div>\n      </>\n   )\n  }\n\n}\n\nexport default LoginRegister;\n","import React, { Component } from 'react';\nimport fire from '../config/fire';\n\nclass Home extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n          email: '',\n          password: '',\n          fireErrors: '',\n          formTitle: 'Login',\n          loginBtn: true\n        }\n    }\n\n    authListener() {\n        fire.auth().onAuthStateChanged((user) => {\n          if(user) {\n            this.setState({\n                user: user,\n                email: user.email,\n            });\n            console.log(this.state.email);\n            \n          } else {\n            this.setState({user:null})\n          }\n        })\n    }\n\n    componentDidMount() {\n        this.authListener()\n    }\n\n    logout = () => {\n        fire.auth().signOut()\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                {}\n                Welcome Home {this.state.email}\n                <br />\n                <button onClick={this.logout}>logout</button>\n            </div>\n        )\n    }\n}\n\nexport default Home\n","import React, {Component} from 'react';\nimport fire from './config/fire';\nimport LoginRegister from './components/LoginRegister'\nimport Home from './components/Home'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      user: null\n    }\n  }\n\n  componentDidMount(){\n    this.authListener();\n  }\n\n  authListener() {\n    fire.auth().onAuthStateChanged((user) => {\n      if(user) {\n        this.setState({user});\n      } else {\n        this.setState({user:null})\n      }\n    })\n  }\n\n  render(){\n   return (\n      <>\n        <div>\n          {this.state.user ? (<Home />) : (<LoginRegister />) }\n        </div>\n      </>\n   )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}